import {
    isArray,
    isDate,
    isFunction,
    isMap,
    isNumber,
    isObject,
    isPlainObject,
    isSet,
    isString,
    isSymbol
} from '../src/typesJudgment'

describe('shared/typesJudgment', () => {
    const str = 'string'
    const num = 1
    const bool = false
    const symb = Symbol()
    const date = new Date()
    const obj = {}
    const arr: unknown = []
    const set = new Set()
    const map = new Map()
    const func1 = () => {}
    function func2() {}

    it('isObject', () => {
        expect(isObject(str)).toBe(false)
        expect(isObject(num)).toBe(false)
        expect(isObject(bool)).toBe(false)
        expect(isObject(symb)).toBe(false)
        expect(isObject(null)).toBe(false)
        expect(isObject(void 0)).toBe(false)
        expect(isObject(date)).toBe(true)
        expect(isObject(obj)).toBe(true)
        expect(isObject(arr)).toBe(true)
        expect(isObject(set)).toBe(true)
        expect(isObject(map)).toBe(true)
        expect(isObject(func1)).toBe(false)
        expect(isObject(func2)).toBe(false)
    })
    it('isPlainObject', () => {
        expect(isPlainObject(str)).toBe(false)
        expect(isPlainObject(bool)).toBe(false)
        expect(isPlainObject(num)).toBe(false)
        expect(isPlainObject(symb)).toBe(false)
        expect(isPlainObject(null)).toBe(false)
        expect(isPlainObject(void 0)).toBe(false)
        expect(isPlainObject(date)).toBe(false)
        expect(isPlainObject(obj)).toBe(true)
        expect(isPlainObject(arr)).toBe(false)
        expect(isPlainObject(set)).toBe(false)
        expect(isPlainObject(map)).toBe(false)
        expect(isPlainObject(func1)).toBe(false)
        expect(isPlainObject(func2)).toBe(false)
    })
    it('isArray', () => {
        expect(isArray(str)).toBe(false)
        expect(isArray(num)).toBe(false)
        expect(isArray(bool)).toBe(false)
        expect(isArray(symb)).toBe(false)
        expect(isArray(null)).toBe(false)
        expect(isArray(void 0)).toBe(false)
        expect(isArray(date)).toBe(false)
        expect(isArray(obj)).toBe(false)
        expect(isArray(arr)).toBe(true)
        expect(isArray(set)).toBe(false)
        expect(isArray(map)).toBe(false)
        expect(isArray(func1)).toBe(false)
        expect(isArray(func2)).toBe(false)
    })
    it('isMap', () => {
        expect(isMap(str)).toBe(false)
        expect(isMap(num)).toBe(false)
        expect(isMap(bool)).toBe(false)
        expect(isMap(symb)).toBe(false)
        expect(isMap(null)).toBe(false)
        expect(isMap(void 0)).toBe(false)
        expect(isMap(date)).toBe(false)
        expect(isMap(obj)).toBe(false)
        expect(isMap(arr)).toBe(false)
        expect(isMap(set)).toBe(false)
        expect(isMap(map)).toBe(true)
        expect(isMap(func1)).toBe(false)
        expect(isMap(func2)).toBe(false)
    })
    it('isMap', () => {
        expect(isSet(str)).toBe(false)
        expect(isSet(num)).toBe(false)
        expect(isSet(bool)).toBe(false)
        expect(isSet(symb)).toBe(false)
        expect(isSet(null)).toBe(false)
        expect(isSet(void 0)).toBe(false)
        expect(isSet(date)).toBe(false)
        expect(isSet(obj)).toBe(false)
        expect(isSet(arr)).toBe(false)
        expect(isSet(set)).toBe(true)
        expect(isSet(map)).toBe(false)
        expect(isSet(func1)).toBe(false)
        expect(isSet(func2)).toBe(false)
    })
    it('isString', () => {
        expect(isString(str)).toBe(true)
        expect(isString(num)).toBe(false)
        expect(isString(bool)).toBe(false)
        expect(isString(symb)).toBe(false)
        expect(isString(null)).toBe(false)
        expect(isString(void 0)).toBe(false)
        expect(isString(date)).toBe(false)
        expect(isString(obj)).toBe(false)
        expect(isString(arr)).toBe(false)
        expect(isString(set)).toBe(false)
        expect(isString(map)).toBe(false)
        expect(isString(func1)).toBe(false)
        expect(isString(func2)).toBe(false)
    })
    it('isNumber', () => {
        expect(isNumber(str)).toBe(false)
        expect(isNumber(num)).toBe(true)
        expect(isNumber(bool)).toBe(false)
        expect(isNumber(symb)).toBe(false)
        expect(isNumber(null)).toBe(false)
        expect(isNumber(void 0)).toBe(false)
        expect(isNumber(date)).toBe(false)
        expect(isNumber(obj)).toBe(false)
        expect(isNumber(arr)).toBe(false)
        expect(isNumber(set)).toBe(false)
        expect(isNumber(map)).toBe(false)
        expect(isNumber(func1)).toBe(false)
        expect(isNumber(func2)).toBe(false)
    })
    it('isSymbol', () => {
        expect(isSymbol(str)).toBe(false)
        expect(isSymbol(num)).toBe(false)
        expect(isSymbol(bool)).toBe(false)
        expect(isSymbol(symb)).toBe(true)
        expect(isSymbol(null)).toBe(false)
        expect(isSymbol(void 0)).toBe(false)
        expect(isSymbol(date)).toBe(false)
        expect(isSymbol(obj)).toBe(false)
        expect(isSymbol(arr)).toBe(false)
        expect(isSymbol(set)).toBe(false)
        expect(isSymbol(map)).toBe(false)
        expect(isSymbol(func1)).toBe(false)
        expect(isSymbol(func2)).toBe(false)
    })
    it('isSymbol', () => {
        expect(isSymbol(str)).toBe(false)
        expect(isSymbol(num)).toBe(false)
        expect(isSymbol(bool)).toBe(false)
        expect(isSymbol(symb)).toBe(true)
        expect(isSymbol(null)).toBe(false)
        expect(isSymbol(void 0)).toBe(false)
        expect(isSymbol(date)).toBe(false)
        expect(isSymbol(obj)).toBe(false)
        expect(isSymbol(arr)).toBe(false)
        expect(isSymbol(set)).toBe(false)
        expect(isSymbol(map)).toBe(false)
        expect(isSymbol(func1)).toBe(false)
        expect(isSymbol(func2)).toBe(false)
    })
    it('isDate', () => {
        expect(isDate(str)).toBe(false)
        expect(isDate(num)).toBe(false)
        expect(isDate(bool)).toBe(false)
        expect(isDate(symb)).toBe(false)
        expect(isDate(null)).toBe(false)
        expect(isDate(void 0)).toBe(false)
        expect(isDate(date)).toBe(true)
        expect(isDate(obj)).toBe(false)
        expect(isDate(arr)).toBe(false)
        expect(isDate(set)).toBe(false)
        expect(isDate(map)).toBe(false)
        expect(isDate(func1)).toBe(false)
        expect(isDate(func2)).toBe(false)
    })
    it('isFunction', () => {
        expect(isFunction(str)).toBe(false)
        expect(isFunction(num)).toBe(false)
        expect(isFunction(bool)).toBe(false)
        expect(isFunction(symb)).toBe(false)
        expect(isFunction(null)).toBe(false)
        expect(isFunction(void 0)).toBe(false)
        expect(isFunction(date)).toBe(false)
        expect(isFunction(obj)).toBe(false)
        expect(isFunction(arr)).toBe(false)
        expect(isFunction(set)).toBe(false)
        expect(isFunction(map)).toBe(false)
        expect(isFunction(func1)).toBe(true)
        expect(isFunction(func2)).toBe(true)
    })
})
